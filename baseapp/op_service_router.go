package baseapp

import (
	"context"
	"fmt"

	gogogrpc "github.com/gogo/protobuf/grpc"
	"github.com/gogo/protobuf/proto"
	"google.golang.org/grpc"

	codectypes "github.com/cosmos/cosmos-sdk/codec/types"
	sdk "github.com/cosmos/cosmos-sdk/types"
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
)

// OpServiceRouter routes fully-qualified Op service methods to their handler.
type OpServiceRouter struct {
	interfaceRegistry codectypes.InterfaceRegistry
	routes            map[string]OpServiceHandler
}

var _ gogogrpc.Server = &OpServiceRouter{}

// NewOpServiceRouter creates a new OpServiceRouter.
func NewOpServiceRouter() *OpServiceRouter {
	return &OpServiceRouter{
		routes: map[string]OpServiceHandler{},
	}
}

// OpServiceHandler defines a function type which handles Op service message.
type OpServiceHandler = func(ctx sdk.Context, req sdk.OpMsg) (*sdk.Result, error)

// Handler returns the OpServiceHandler for a given op or nil if not found.
func (msr *OpServiceRouter) Handler(op sdk.OpMsg) OpServiceHandler {
	return msr.routes[sdk.OpMsgTypeURL(op)]
}

// HandlerByTypeURL returns the OpServiceHandler for a given query route path or nil
// if not found.
func (msr *OpServiceRouter) HandlerByTypeURL(typeURL string) OpServiceHandler {
	return msr.routes[typeURL]
}

// RegisterService implements the gRPC Server.RegisterService method. sd is a gRPC
// service description, handler is an object which implements that gRPC service.
//
// This function PANICs:
//   - if it is called before the service `Op`s have been registered using
//     RegisterInterfaces,
//   - or if a service is being registered twice.
func (msr *OpServiceRouter) RegisterService(sd *grpc.ServiceDesc, handler interface{}) {
	// Adds a top-level query handler based on the gRPC service name.
	for _, method := range sd.Methods {
		fqMethod := fmt.Sprintf("/%s/%s", sd.ServiceName, method.MethodName)
		methodHandler := method.Handler

		var requestTypeName string

		// NOTE: This is how we pull the concrete request type for each handler for registering in the InterfaceRegistry.
		// This approach is maybe a bit hacky, but less hacky than reflecting on the handler object itself.
		// We use a no-op interceptor to avoid actually calling into the handler itself.
		_, _ = methodHandler(nil, context.Background(), func(i interface{}) error {
			opMsg, ok := i.(sdk.OpMsg)
			if !ok {
				// We panic here because there is no other alternative and the app cannot be initialized correctly
				// this should only happen if there is a problem with code generation in which case the app won't
				// work correctly anyway.
				panic(fmt.Errorf("unable to register service method %s: %T does not implement sdk.OpMsg", fqMethod, i))
			}

			requestTypeName = sdk.OpMsgTypeURL(opMsg)
			return nil
		}, noopInterceptor)

		// Check that the service Op fully-qualified method name has already
		// been registered (via RegisterInterfaces). If the user registers a
		// service without registering according service Op type, there might be
		// some unexpected behavior down the road. Since we can't return an error
		// (`Server.RegisterService` interface restriction) we panic (at startup).
		reqType, err := msr.interfaceRegistry.Resolve(requestTypeName)
		if err != nil || reqType == nil {
			panic(
				fmt.Errorf(
					"type_url %s has not been registered yet. "+
						"Before calling RegisterService, you must register all interfaces by calling the `RegisterInterfaces` "+
						"method on module.BasicManager. Each module should call `opservice.RegisterOpServiceDesc` inside its "+
						"`RegisterInterfaces` method with the `_Op_serviceDesc` generated by proto-gen",
					requestTypeName,
				),
			)
		}

		// Check that each service is only registered once. If a service is
		// registered more than once, then we should error. Since we can't
		// return an error (`Server.RegisterService` interface restriction) we
		// panic (at startup).
		_, found := msr.routes[requestTypeName]
		if found {
			panic(
				fmt.Errorf(
					"op service %s has already been registered. Please make sure to only register each service once. "+
						"This usually means that there are conflicting modules registering the same op service",
					fqMethod,
				),
			)
		}

		msr.routes[requestTypeName] = func(ctx sdk.Context, req sdk.OpMsg) (*sdk.Result, error) {
			ctx = ctx.WithEventManager(sdk.NewEventManager())
			interceptor := func(goCtx context.Context, _ interface{}, _ *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {
				goCtx = context.WithValue(goCtx, sdk.SdkContextKey, ctx)
				return handler(goCtx, req)
			}
			if err := req.ValidateBasic(); err != nil {
				if mm, ok := req.(getter1); ok {
					if !mm.GetAmount().Amount.IsZero() {
						return nil, err
					}
				} else {
					return nil, err
				}
			}
			// Call the method handler from the service description with the handler object.
			// We don't do any decoding here because the decoding was already done.
			res, err := methodHandler(handler, sdk.WrapSDKContext(ctx), noopDecoder, interceptor)
			if err != nil {
				return nil, err
			}

			resOp, ok := res.(proto.Message)
			if !ok {
				return nil, sdkerrors.Wrapf(sdkerrors.ErrInvalidType, "Expecting proto.Message, got %T", resOp)
			}

			return sdk.WrapServiceResult(ctx, resOp, err)
		}
	}
}

// SetInterfaceRegistry sets the interface registry for the router.
func (msr *OpServiceRouter) SetInterfaceRegistry(interfaceRegistry codectypes.InterfaceRegistry) {
	msr.interfaceRegistry = interfaceRegistry
}
